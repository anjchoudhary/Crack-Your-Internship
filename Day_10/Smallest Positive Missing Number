//{ Driver Code Starts
import java.util.*;
import java.io.*;


// } Driver Code Ends

class Solution
{
    //Function to find the smallest positive number missing from the array.
    static int segregateArr(int arr[], int n)
    {
        // Your code here
        int j=0,i;
        for(i=0;i<n;i++){
            if (arr[i]<=0){
                int temp=arr[i];
                arr[i] =arr[j];
                arr[j]=temp;
                j++;
                
            }
        }
        return j;
    }
    static int findMissingPositive(int arr[], int st, int end){
        for(int i=st; i<end;i++){
            if(Math.abs(arr[i])+st - 1 < end && arr[ Math.abs(arr[i])+st - 1] > 0) 
    	    arr[ Math.abs(arr[i])+st - 1] = -1*arr[ Math.abs(arr[i])+st - 1]; 
        } 
        
        for(int i=st;i<end;i++)
        {if (arr[i]>0){
            return i-st+1;
        }
        }
        return end-st+1;
    }
     static int missingNumber(int arr[], int size) 
    { 
        int shift = segregateArr(arr, size); 
     return findMissingPositive(arr,shift, size); 
    }
    
    
}
    


//{ Driver Code Starts.

class Main
{   
    public static void main (String[] args) throws IOException
    {

		BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out=new PrintWriter(System.out);
		
        //taking testcases
		int t=Integer.parseInt(in.readLine().trim());
		while(t-->0){
		    
		    //input number n
			int n=Integer.parseInt(in.readLine().trim());
			int[] arr=new int[n];
			String s[]=in.readLine().trim().split(" ");
			
			//adding elements to the array
			for(int i=0;i<n;i++)
				arr[i]=Integer.parseInt(s[i]);
				
			Solution obj = new Solution();
			
			//calling missingNumber()
			int missing = obj.missingNumber(arr,n);
			out.println(missing);
		}
		out.close();
    }
}


// } Driver Code Ends
