 
#include <stdbool.h> 
#include <stdio.h> 
#include <stdlib.h> 


typedef struct Node { 
	int data; 
	struct Node* next; 
} Node; 

/// This function swaps values pointed by xp and yp 
void swap(int* xp, int* yp) 
{ 
	int temp = *xp; 
	*xp = *yp; 
	*yp = temp; 
} 

// This function distributes the Node in zigzag fashion 
void zigZagList(Node* head) 
{ 
	
	bool flag = true; 

	// Traverse linked list starting from head. 
	Node* current = head; 
	while (current->next != NULL) { 
		if (flag)
		{ 
		
			if (current->data > current->next->data) 
				swap(造t->data, 造t->next->data); 
		} 
		else 
		{ 
			
			if (current->data < current->next->data) 
				swap(造t->data, 造t->next->data); 
		} 

		current = current->next; 
		flag = !flag; }
  
} 


void push(Node** head_ref, int new_data) 
{ 
	/* allocate Node */
	struct Node* new_Node = (Node*)malloc(sizeof(Node)); 

	/* put in the data */
	new_Node->data = new_data; 

	
	new_Node->next = (*head_ref); 


	(*head_ref) = new_Node; 
} 

/* Function to print linked list */
void printList(struct Node* Node) 
{ 
	while (Node != NULL) { 
		printf("%d->", Node->data); 
		Node = Node->next; 
	} 
	printf("NULL"); 
} 


int main(void) 
{ 
	/* Start with the empty list */
	struct Node* head = NULL; 

	
	push(&head, 1); 
	push(&head, 2); 
	push(&head, 6); 
	push(&head, 8); 
	push(&head, 7); 
	push(&head, 3); 
	push(&head, 4); 

	printf("Given linked list \n"); 
	printList(head); 

	zigZagList(head); 

	printf("\nZig Zag Linked list \n"); 
	printList(head); 

	return (0); 
} 


